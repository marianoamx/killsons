#!/bin/bash
printf '%s %s\n' "$0" ': mata el PID especificado (padre) y todos sus descendientes, hijos, nietos, etc.'
printf 'todo lo que esté abajo del padre en -esa- "rama" del pstree v0.2\n\n'

### TO-DO

# "-demo"
# que liste procesos pero que no mate nada, que solo muestre que haría
# queda un poco al revés jaja, rompe todo default, y con 1 opcion no haría nada


# matar primero descendientes hasta el padre o al revés ???
# 1 padre > 2 hijo > 3 nieto
# o 3 > 2 > 1   ???

### TO-DO


#que "ps" usar ?
# ps auxwwe
# ps uwwe -p X
# ps eww -el
ps2='ps -ww -o uname,pid,ppid,etime,%cpu,%mem,tname,stat,start,time,args -p '

# si "DEMO == 1" corre simulacion
DEMO=0

#salir si no dan parametros
if [ $# -eq 0 ]; then
  # printf 'error: ingresar parametros\n' 
  printf "uso: [-d|--demo] [PID]...\n"
  printf "$0 -d 2 3 123\n"
  exit 1
fi

LISTA=() # inicializa array vacío ???
while [ $# -gt 0 ]
do
parametro="$1"

case $parametro in
  -d|--demo)
  DEMO=1
  shift # pasar al siguiente parametro
  ;;
  
  *)
  # es un numero > 1 el PID?
  if [ "$1" -le "1" ]; then
    echo 'error: ingresar PID mayor que 1' ; exit 1
  fi
  
  # que sea un numero
  case $1 in
    ''|*[!0-9]*) 
      printf "error: ingresar numero de PID"
      exit 1
    ;;
  esac
  
  LISTA+=("$1")  # guardar PID en array
  shift
  ;;
esac
done


#array de todos los PIDs a matar QUE EXISTAN!
LISTA2=()

for padre in "${LISTA[@]}";
do
  #existe el PID en ejecucion?
  if ! ps -o pid -p "$padre" | tail -1 | grep "$padre" >/dev/null ; then
    printf "error, no existe PID : ${padre}\n"
    # exit 1
  else
    pstree01="`pstree -pal -U $padre`"
    printf '%s\n\n' "$pstree01"
  fi

  #calcular padre + toda la descendencia
  lista="`pstree -pa  | grep -o '[0-9]\+'`"
  for i in `pstree -pa ${padre} | grep -o '[0-9]\+'`
  do 
    LISTA2+=("$i")
  done
done


if [[ ${#LISTA2[@]} -eq 0 ]]; then
  printf 'no existen PIDs a matar\n'
  exit 1
fi

printf " kill -15 PIDs:\n"

# mostrar ps con los PIDs
$ps2 1 | head -1

# matate solo guacho
for pid in "${LISTA2[@]}"
do
  psout="$($ps2 $pid)"
  if [ $(echo "$psout" | wc -l) -eq 2 ]; then
    echo "$psout" | tail -1
    if [ $DEMO -eq 0 ]; then
      kill -15 $pid
    fi
  fi
done

#no hacemos esperar si no hace falta
count1=`ps -o pid "${LISTA2[@]}" | wc -l`
if [[ $count1 -eq 1 ]]; then
  printf " se finalizaron (terminate) todos los PIDs\n"
  exit 0
fi

printf "\n"
printf "3...\n"
sleep 1
echo 2..
sleep 1
echo 1
sleep 1
echo

# de nuevo, ahora -9
echo " kill -9 PIDs:"
$ps2 1 | head -1
for pid in "${LISTA2[@]}"
do
  psout=`$ps2 $pid`
  if [ $(echo "$psout" | wc -l) -eq 2 ]; then
    echo "$psout" | tail -1
    if [ $DEMO -eq 0 ]; then
      kill -9 $pid
    fi
  fi
done
echo


echo " ¿Quedó algun PID vivo?:"
$ps2 1 | head -1
for pid in "${LISTA2[@]}" 
do
  psout="`$ps2 $pid`"
  if [ $(echo "$psout" | wc -l) -eq 2 ]; then
    echo "$psout" | tail -1
  fi
done
